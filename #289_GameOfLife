

// Time Complexity : O(m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    int m,n;
    public void gameOfLife(int[][] board) 
    {
        
         m = board.length;
         n = board[0].length;
        int LiveNeighbour = 0;
        int i,j;
        
        for(i=0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                LiveNeighbour = CalculateLiveNeighbour(i,j, board);
                
                if(board[i][j] == 0)
                {
                    if(LiveNeighbour == 3)
                    {
                       board[i][j] = 2; 
                    }
                    
                }
                else
                {
                      if(LiveNeighbour > 3 )
                    {
                       board[i][j] = 3; 
                    }
                    
                    if( LiveNeighbour < 2)
                    {
                       board[i][j] = 3; 
                    }

                    
                
                  
                }
                
            }
        }  
            
             for(i=0; i<m; i++)
        {
            for(j=0; j<n; j++)
            {
                   if(board[i][j] == 2)
                   {
                          board[i][j] = 1;
                   }
                else if(board[i][j] == 3)
                {
                    board[i][j] = 0;
                }
                    
            }}
            
            
         
        
        
    }
    
    public int CalculateLiveNeighbour(int r, int c, int[][] board)
    {
        int [][] dirs= { {0,1},{0,-1},{1,0},{-1,0},{-1,-1},{1,1},{-1,1},{1,-1} };
        int count =0;
        int nr,nc;
        for(int[] dir : dirs)
        {
             nr = dir[0]+r;
             nc = dir[1]+c;
              if((nc>=0 && nc < n && nr>=0 && nr< m) && (board[nr][nc] == 1 || board[nr][nc] == 3 ) )
                    {
                        count ++;
                    }
            
        }
    
  
    return count;
        
    }
}
