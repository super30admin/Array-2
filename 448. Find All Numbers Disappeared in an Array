Approach 1: Brute force

Time complexity: O(n)
Space complexity: O(n)
Did this code submitted successfully on leetcode: Yes

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        
        List<Integer> result = new ArrayList<>();
        
        Set<Integer> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(!set.contains(nums[i]))
                set.add(nums[i]);
        }
        
        for(int i=1;i<nums.length+1;i++){
            if(!set.contains(i))
                result.add(i);      
        }
        
        return result;
    }
}

Approach 2: Optimized with conditions

Time complexity: O(n)
Space complexity: O(1)
Did this code submitted successfully on leetcode: Yes

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        
        List<Integer> result = new ArrayList<>();
        
        for(int i=0;i<nums.length;i++){
            int id = Math.abs(nums[i])-1;
            
            if(nums[id]>0)
                nums[id] = nums[id]*-1;
        }
        
        for(int i=1;i<=nums.length;i++){
            if(nums[i-1]>0)
                result.add(i);
        }
        
        return result;
    }
}
