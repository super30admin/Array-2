class Solution {
    // Time Complexity : O( nums )
// Space Complexity : O(nums )
// Did this code successfully run on Leetcode : Yes
// Your code here along with comments explaining your approach:
    
/*
1. Take a count array in which gives frequency of nums present based on index.
2. if frequency is 0, then the corresponding index number is missing.
*/
    
    public List<Integer> findDisappearedNumbers(int[] nums) {
        if(nums == null || nums.length == 0) return new ArrayList<Integer>();
        
        List<Integer> result = new ArrayList<>();
        
        int[] count = new int[nums.length+1];
        
        for(int i =0;i<nums.length;i++){
            count[nums[i]]++;
        }
        
        for(int i =1;i<count.length;i++){
            if(count[i]==0){
                result.add(i);
            }
        }
        
        return result;
    }
}


class Solution {
    // Time Complexity : ( nums )
// Space Complexity : O(1 )
// Did this code successfully run on Leetcode : Yes
// Your code here along with comments explaining your approach:
    
/*
1. While traversing, nums[i] ---> mark negate nums[nums[i]-1]    -->indicating (i-1) element is present.
2. Take abs value to each element, so that we take the original value while negating.
*/
    
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> result = new ArrayList<>();
        
        if(nums == null || nums.length == 0) return result;
        
        
        for(int i =0;i<nums.length;i++){
            int index = Math.abs(nums[i]) - 1;
            if(nums[index] > 0)  nums[index] *= -1;   
        }
        
        for(int i =0;i<nums.length;i++){
            if(nums[i]>0){
                result.add(i+1);
            }
        }
        
        return result;
    }
}