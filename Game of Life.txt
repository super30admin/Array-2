Time Complexity = O(mxn)
Space Complexity = O(1)

class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        #1-->0 = 2
        #0-->1 = 3    
            #bottom cell, do i+1,j
            #top cell = i-1, j
            #left cell = i, j-1
            #right cell = i, j+1
            #top left cell or diagonal left = i-1, j-1
            #top right cell or diagonal right = i-1, j+1
            #bottom right cell or diagonal cell = i+1, j+1
            #bottom left cell or diagonal left = i+1, j-1
            
        if board == None or len(board) == 0:
            return
        
        m = len(board)
        n = len(board[0])
        
        for i in range(m):
            for j in range(n):
                count = 0
                #check for top element
                if i>0 and (board[i-1][j] == 1 or board[i-1][j] == 2):
                    count += 1
                    
                    #check for bottom element
                if i< m-1 and (board[i+1][j] ==1 or board[i+1][j] ==2):
                    count += 1
                        
                    #check for left element
                if j > 0 and (board[i][j-1] ==1 or board[i][j-1] ==2):
                    count += 1
                    
                    #check for right element
                if j< n-1 and (board[i][j+1] ==1 or board[i][j+1] ==2):
                    count += 1
                        
                    #check for top left element
                if i>0 and j >0 and (board[i-1][j-1] ==1 or board[i-1][j-1] ==2):
                    count += 1
                        
                    #check for top right element
                if i >0  and j < n-1 and (board[i-1][j+1] ==1 or board[i-1][j+1] ==2):
                    count+=1
                        
                    #check for bottom left element
                if i < m-1 and j > 0 and (board[i+1][j-1] ==1 or board[i+1][j-1] ==2):
                    count+=1
                        
                    #check for bottom right element
                if i < m-1 and j < n-1 and (board[i+1][j+1] ==1 or board[i+1][j+1] ==2):
                    count+=1
                        
        
                if board[i][j]==1 and (count < 2 or count >3): #rule 1 and rule 3
                    #make the alive cell dead
                    board[i][j] = 2
                
                if board[i][j] == 0 and count == 3: #rule 4
                    #make the dead cell alive
                    board[i][j] = 3
                    
        for i in range(m):
            for j in range(n):
                if board[i][j] == 2:
                    board[i][j] = 0
                if board[i][j] == 3:
                    board[i][j] = 1
                    
                    
        return board
                    