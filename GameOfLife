//Time complexity O(n*m)
//Leetcode tested

public class GameOfLife {
    public boolean neighbourCheck(int[][] board, int changedI, int changedJ){
        if(changedI>=0 && changedI< board.length && changedJ>=0 && changedJ< board[0].length){
            if(board[changedI][changedJ] == 1 || board[changedI][changedJ] == 2)
                return true;
            else return false;
        }
        return false;
    }
    public void gameOfLife(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                int nCount=0;
                if(neighbourCheck(board,i-1,j))
                    nCount++;
                if(neighbourCheck(board,i+1,j))
                    nCount++;
                if(neighbourCheck(board,i,j+1))
                    nCount++;
                if(neighbourCheck(board,i,j-1))
                    nCount++;
                if(neighbourCheck(board,i-1,j-1))
                    nCount++;
                if(neighbourCheck(board,i-1,j+1))
                    nCount++;
                if(neighbourCheck(board,i+1,j-1))
                    nCount++;
                if(neighbourCheck(board,i+1,j+1))
                    nCount++;

                //0 1 3
                //1 0 2
                if(board[i][j] == 0 && nCount == 3){
                    board[i][j]=3;
                }
                else if(board[i][j] == 1 && nCount < 2){
                    board[i][j]=2;
                }
                else if(board[i][j] == 1 && (nCount == 2 || nCount == 3)){
                    board[i][j]=1;
                }
                else if(board[i][j] == 1 && nCount>3){
                    board[i][j]=2;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if(board[i][j] == 2)
                    board[i][j]=0;
                if(board[i][j] == 3)
                    board[i][j]=1;
            }
        }
    }
}
