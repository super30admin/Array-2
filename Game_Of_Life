class Solution {
    public void gameOfLife(int[][] board) {
        if(board == null || board.length==0 || board[0].length==0){
            
        }
        int n = board.length;
        int m = board[0].length;
        
        // 2 means from alive to dead
        //3 means from dead to alive
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int count = countLives(board,i,j,n,m);
                //1st case
                if(board[i][j] == 1 && (count > 3 || count < 2)){
                    board[i][j] = 2;
                }
                else if(board[i][j] == 0 && (count == 3)){
                    board[i][j] = 3;
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == 2){
                    board[i][j] = 0;
                }
                else if(board[i][j] == 3){
                    board[i][j] = 1;
                }
            }
        }
    }
    
    private int countLives(int[][] board, int i,int j, int n, int m){
        int[][] dirs = {{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
        int count = 0;
        for(int[] dir : dirs){
            int r = i + dir[0];
            int c = j + dir[1];
            
            if(r>=0 && r< n && c>=0 && c< m && (board[r][c] == 1 || board[r][c] == 2)){
                count += 1;
            }
        }
        return count;
    }
}


//time complexity : O(n X m) = O(n)
//space complexity : O(1)
// leetcode accepted
