

// Time Complexity : o(n/2)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* compare elements in pairs.
* update the min with minimum of curr minimum and smallest number in the pair
* update the max with maximum of curr max and bigger number in the pair
* to handle odd lengths , check the last element separately
* */


class HelloWorld {
    public static int[] findMinMax(int[] nums) {
        int min = nums[0];
        int max = nums[0];
        int i= 0;
        for(; i+1< nums.length; i=i+2){
            if(nums[i] < nums[i+1]){
                min = Math.min(min, nums[i]);
                max = Math.max(max, nums[i+1]);
            } else {
                min = Math.min(min, nums[i+1]);
                max = Math.max(max, nums[i]);
            }
        }

        if(i < nums.length){
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        return new int[]{min, max};
    }

    public static void main(String[] args) {
        int arr[] = {1000, 11, 445, 1, 330, 3000, 0};
        int arr_size = 6;
        int[] res = findMinMax(arr);
        System.out.println(res[0]+ ", " + res[1]);
    }
}