/* Time Complexity : O(1.5n) -> O(n)
   Space Complexity : O(1)
   Did this code successfully run on Leetcode : yes
   Any problem you faced while coding this :No


Approach : Reducing the number of comparisions at each step from 3 to 4 by comparing the 2 numbers first and then comparing the smaller of the two with the min and the larger of the two with max. Ultimately, changing the complexity from O(2n) to O(1.5n)
 */



public class Main{
  static int min;
  static int max;
   public static void min_max(int a[]){
       min=Integer.MAX_VALUE;
       max=Integer.MIN_VALUE;
       for(int i=1;i<a.length;i++){
           if(a[i-1]<a[i]){
               if(min>a[i-1]){
                   min=a[i-1];
               }
               if(max<a[i]){
                  max=a[i];
               }
            }
            else if(a[i-1]>a[i]){
               if(min>a[i]){
                   min=a[i];
               }
               if(max<a[i-1]){
                  max=a[i-1];
               }
            }
            else{
                if(min>a[i]){
                    min=a[i];
                }
                if(max<a[i]){
                    max=a[i];
                }

            }
      }
   System.out.println("Min " + min);
   System.out.println("Max " + max);
   }
    public static void main(String args[]){
        int[] arr={5,9,11,9,10};
        min_max(arr);
    }
}