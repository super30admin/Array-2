/* Time Complexity : O(2m*n) -> O(m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :No


Approach : Visit each point in the matrix, check the neighbours if it is initially alive then dead denote it with an abbreviation and another 
              abbreviation for dead-> alive. follow the rules. Change the abbreviations to 1 and 0 at the end and return the result. */

class Solution {
    public void gameOfLife(int[][] board) {
        if(board==null || board.length==0) return;
    int m=board.length;
    int n=board[0].length;
      for(int i=0;i<board.length;i++){
          for(int j=0;j<board[0].length;j++){
            int co=countlives(board,i,j);
           if(board[i][j]==1){
          if(co>3 || co<2){
              //alive-> dead
              board[i][j]=3;
          }
           }
          else{
              //zero on the initial board.
              //dead -> alive
              if(co==3){
                  board[i][j]=9;
              }
          }
          }
      }
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
             if(board[i][j]==3) board[i][j]=0;
             if(board[i][j]==9) board[i][j]=1;
            }
      
            
        }
            
    }
    
    private int countlives(int[][] board, int i,int j){
        int[][] dirs={{1,0},{0,1},{-1,0},{0,-1},{1,1},{-1,-1},{-1,1},{1,-1}};
        int count=0;
        for(int[] dir : dirs) {
             int r=i+dir[0];
             int c=j+dir[1];
             if(r>=0 && c>=0 && r<board.length && c<board[0].length && (board[r][c]==1 || board[r][c]==3)){
                     count++;
                        }
              }
       
       return count; 
    }
}