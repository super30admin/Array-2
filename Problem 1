

//using extra space
//Time complaxity: O(n)
//Space complexity: O(n)
//Accepted in Leetcode

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<>();
        HashSet<Integer> set = new HashSet<>();
        for(int i=0;i<nums.length;i++)
        {
           if(!set.contains(nums[i]))
               set.add(nums[i]);
        }
        for(int i=1;i<=nums.length;i++)
        {
            if(!set.contains(i))
                list.add(i);
        }
        return list;
    }
}


//No extra space
//Time complaxity: O(n)
//Space complexity: O(1)
//Accepted in Leetcode : No, 31/34 test cases passed, time limit exceeded 


class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list = new ArrayList<>();
         for(int i=1;i<=nums.length;i++)
        {
                list.add(i);
        }
        for(int i=0;i<nums.length;i++)
        {
           int val = nums[i];
           list.remove(new Integer(val));
        }
       
        return list;
    }
}
