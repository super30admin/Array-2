448. Find All Numbers Disappeared in an Array
------------------------------------------------
Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach



class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> result;
        for(int i=0; i < nums.size(); i++) {
            int it = abs(nums.at(i))-1;
            if (nums.at(it) > 0) {
                nums.at(it) *= -1;
            }
        }
        for(int i=0; i < nums.size(); i++) {
            if (nums.at(i) > 0) {
                result.push_back(i+1);
            } else {
                nums.at(i) *= -1;
            }
        }
        return result;

    }
};
