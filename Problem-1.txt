//https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/
// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//visit index(nums[i] - 1 ) and make it negative. 
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        if(nums == null || nums.length ==0) return new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        for(int i =0;i<nums.length;i++)
        {
            int ind = Math.abs(nums[i])-1;
            if(nums[ind]>0)
            nums[ind] = nums[ind] * -1;
        }
        // if num is postive then index in unvisited and not present
        for(int i =0 ;i<nums.length;i++)
        {
            if(nums[i]>0)
            {
                res.add(i+1);
            }
        }

        return res;
        
    }
}