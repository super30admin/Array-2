class Solution {
    public void gameOfLife(int[][] board) {
        
        // Edge case , when matrix is empty
        if(board == null || board.length == 0 || board[0].length == 0) return;
        int m = board.length;
        int n = board[0].length;
        
        // 0 --> 1 is 2
        // 1 --> 0 is 3    
        
        // Iterate through the matrix
        for(int i = 0  ; i < m; i ++){
            for(int j = 0 ; j < n ; j ++){
                int count = liveCount(board , m , n , i , j);
                // condition 1 and 3  ; < 2 and >3 dies
                if(board[i][j] == 1 && (count < 2 || count > 3)){
                    board[i][j] = 3;
                }
                // condition 4  ; = 3 will become alive
                if(board[i][j] == 0 && count == 3){
                    board[i][j] = 2;
                }
            }
            
        }
        
        
        // replace 2 with 1 and 3 with 0 in the matrix
        
        for(int i = 0  ; i < m; i ++){
            for(int j = 0 ; j < n ; j ++){
              
                if(board[i][j] == 2){
                    board[i][j] = 1;
                }
                if(board[i][j] == 3){
                    board[i][j] = 0;
                }
            }
            
        }
        
    }
    
    private int liveCount(int[][] board , int m , int n , int i , int j){
        int[][] dirsArray = {{0,1},{0,-1},{1,0},{-1,0},{1,1},{-1,-1},{1,-1},{-1,1}};
        int count = 0;
        
        for(int[] dir : dirsArray){
            int r = i+ dir[0];
            int c = j + dir[1];
            if(r >= 0 && r < m && c >= 0 && c < n && (board[r][c] == 1 || board[r][c] == 3) ){
            count++;
        }
        }
        
        return count;
    }
}

// Time complexity - O(m*n) ; Space Complexity O(1)
