class Solution {
    int m,n;
    public void gameOfLife(int[][] board) {
        
        m = board.length;
        n = board[0].length;
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                int count = countLive(board, i, j);
                //System.out.println("i = "+i+" j = "+j+" count = "+count);
                
               if(board[i][j]==1 && (count<2 || count >3))
               {
                   board[i][j] = 3;
               }
               if(board[i][j] == 0 && (count == 3))
               {
                   board[i][j] = 2;
               }
            }
        }
        
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
        
                if(board[i][j] == 2)
                {
                    board[i][j] = 1;
                }
                
                if(board[i][j] == 3)
                {
                    board[i][j] = 0;
                }
            }
        }
    }
    
    private int countLive(int[][]board, int i, int j)
    {
         int[][] neigh = {{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
        int[][] dirs ={{0,-1},{0,1},{-1,0},{1,0},{-1,-1},{-1,1},{1,-1},{1,1}};
        int result=0;
        for(int[] s : dirs)
        {
            int r = s[0]+i;
            int c = s[1]+j;
            
            if(r>=0 && r<m && c>=0 && c<n && (board[r][c] == 1 || board[r][c] == 3))
            {
               result++;
            }
        }
    
        return result;
    }
}

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        
        for(int i=0; i<nums.length; i++)
        {
            if(nums[Math.abs(nums[i])-1] > 0)
            {
                nums[Math.abs(nums[i])-1] = nums[Math.abs(nums[i])-1]*-1;
            }
            
        }
        List<Integer> result = new ArrayList<>();
        for(int i=0; i<nums.length; i++)
        {
            if(nums[i] >0)
            {
                result.add(i+1);
            }
        }
        return result;
    }
}
