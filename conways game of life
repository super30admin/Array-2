// Time Complexity : O(m x n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach


class Solution {
    int n;
    int m;
    public void gameOfLife(int[][] board) {
        //dead (0) becomes 3
        //alive (1) becomes 2
        if(board.length == 0 || board == null) return;
        m = board.length;
        n = board[0].length;
        //loop through the board
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                //tell me how many neighbors are alive
                int c = countLives(board, i, j);
                //rules 1 & 3 can be combined
                if(board[i][j] == 1 && (c > 3 || c < 2)) board[i][j] = 2;
                //4th rule
                if(board[i][j] == 0 && c == 3) board[i][j] = 3;
            }
        }
        //change back 2's and 3's
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 3) board[i][j] = 1;
                if(board[i][j] == 2) board[i][j] = 0;
            }
        }
    }
    private int countLives(int [][] board, int i, int j){
        int count = 0;
        int [][] directions = {{0,1}, {0,-1}, {-1,0}, {1,0}, {-1,-1}, {-1,1}, {1,1}, {1,-1}};
        for(int [] x : directions){
            int r = i + x[0];
            int c = j + x[1];
            if(r >= 0 && c >= 0 && r < m && c < n && (board[r][c] == 1 || board[r][c] == 2)) count++;
        }
        return count;
    }
}