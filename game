//time complexity: O(m*n)
//space complexity: O(1)
class Solution {
    public void gameOfLife(int[][] board) {
        // return the next state of baord
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[0].length; j++){
                int lives = count_Lives(board, i, j);
                //live cell -> dies
                if(board[i][j] == 1){
                    if(lives < 2)
                        board[i][j] = 2; // 1 changed to 0;
                    else if(lives == 2 || lives == 3)
                          continue;
                    else if(lives > 3)
                        board[i][j] = 2;  //1 changed to 0;
                }
                
                //dead cell -> lives
                 if(board[i][j] == 0){
                   if(lives == 3)
                        board[i][j] = 3;  // 0 changed to 1;
                }
            }
        }
        
          for(int i=0; i<board.length; i++){
            for(int j =0; j<board[0].length; j++){
                if(board[i][j] == 2)
                    board[i][j] = 0;
                else if(board[i][j] == 3)
                    board[i][j] = 1;
            }
        }
    } 
    
    
     public int count_Lives(int[][] board, int i, int j){
           int count = 0;
           int[][] dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}, {1,1}, {1,-1}, {-1,1}, {-1,-1}};
            for(int[] dir : dirs){
                int x = i + dir[0];
                int y = j + dir[1];
               if(x >= 0 && y >= 0 && x < board.length && y < board[0].length){
                if(board[x][y] == 1 || board[x][y] == 2)
                    count++;
             }
          }
        return count;
     }
}
