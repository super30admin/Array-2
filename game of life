// Time Complexity : O(mn) m-rows n-cols
// Space Complexity : O(1) constant
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
thinking of direction array to compute count

// Your code here along with comments explaining your approach
class Solution {
    int m,n;
    public void gameOfLife(int[][] board) {
        if(board.length ==0 || board == null)
            return;
        
         m = board.length;
         n = board[0].length;
        //change state
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                int count = countLives(board, i, j);
                if(board[i][j]==1 && (count <2 || count>3))
                    board[i][j] = 2;
                
                if(board[i][j] == 0 && (count == 3))
                    board[i][j] = 3;
                    
            }
        }
        
        //change to result
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                int count = countLives(board, i, j);
                if(board[i][j]==2 )
                    board[i][j] = 0;
                
                if(board[i][j] ==3)
                    board[i][j] = 1;
                    
            }
        }
    }
    
    private int countLives(int[][] board, int i, int j)
    {
         int count =0;
        int[][] dirs ={{0,1},{0,-1},{1,-1},{1,0},{1,1},{-1,-1},{-1,0},{-1,1}};
        
        for(int[] d: dirs)
        {
            int row = i+ d[0];
            int col = j + d[1];
            
            if( row >= 0 && col >=0 && row < m && col <n && (board[row][col] == 1 || board[row][col] == 2) )
                count ++;
            
        }
        return count;
    }
}
