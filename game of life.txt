class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
    # if board is None or len(board)==0:
    #     return 'empty'
        m=len(board)
        n=len(board[0])
        #1-->0==>2
        #0-->1==>3
        for i in range(m):
            for j in range(n):
                liveNeighbourcount=self.countLiveNeighbours(board,i,j)
                if board[i][j]==1:
                    if liveNeighbourcount <2 or liveNeighbourcount>3:
                        board[i][j]=2
                else:
                    if liveNeighbourcount==3:
                        board[i][j]=3
        for i in range(m):
            for j in range(n):
                if board[i][j]==2:
                    board[i][j]=0
                elif board[i][j]==3:
                    board[i][j]=1
    
    def countLiveNeighbours(self, board: List[List[int]], row: int, col: int) -> None:
        count = 0
        m = len(board)
        n = len(board[0])
    # U D L R UL UR LL LR
        dirs = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]
        for dir in dirs:
            nr = row + dir[0]
            nc = col + dir[1]
            if nr >= 0 and nr < m and nc >= 0 and nc < n and (board[nr][nc] == 1 or board[nr][nc] == 2):
                count += 1
        return count


TC-O(mn)
SC-o(1)
