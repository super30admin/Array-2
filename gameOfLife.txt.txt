class Solution {
public:
    
    
    int checkNeighbours(vector<vector<int>> board, int i, int j){
        //[-1,-1] [-1,0] [-1,+1]
        //[0,-1]  Point  [0,+1]
        //[1,-1]  [1,0]  [1,+1]
        int cnt = 0;
        vector<vector<int>> dirMatrix = {{1,-1},{1,0},{1,1},{0,-1},{0,1},{-1,-1},{-1,0},{-1,1}};
        for(auto dir: dirMatrix){
            int row = i+ dir[0];
            int col = j+ dir[1];
            
            if(row>=0 && row<board.size() && col>=0 && col< board[0].size() && (board[row][col] == 1 || board[row][col] == 2)){
                cnt++;
            }
            
        }
        return cnt;
    
        
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        
        //2 alive to dead
        //3 dead to alive
        for(int i=0; i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                
                int alive = checkNeighbours(board, i, j);
                if(board[i][j] == 1 && (alive <2 || alive >3)){
                    board[i][j] = 2;
                }else if(board[i][j] == 0 && alive == 3){
                    board[i][j] = 3;
                }
            }
        }
           for(int i=0; i<board.size();i++){
                for(int j=0;j<board[0].size();j++){
                    if(board[i][j] == 2){
                        board[i][j] = 0;
                    }else if(board[i][j] == 3){
                        board[i][j] = 1;
                    }
                }
            }

        
    }
};