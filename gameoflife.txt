//Time Complexity : O(n*m)
//Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes



class Solution {
    public void gameOfLife(int[][] board) 
    {
        if(board.length == 0 || board==null)
        {
            return;
        }
        int m = board.length;
        int n = board[0].length;
        
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                int count = getLiveCount(board,i,j);
                if(board[i][j]==0)
                {
                    if(count==3)
                    {
                        board[i][j] = 2;
                    }
                }
                else
                {
                       if(count < 2)
                        {
                            board[i][j] =3;
                        }
                        if(count >3)
                        {
                            board[i][j] = 3;
                        }
                }
            }
        }
        
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==2)
                {
                    board[i][j] = 1;
                }else if(board[i][j]==3)
                {
                    board[i][j] = 0;
                }
            }
        }
    }
    
    private static int getLiveCount(int[][] board, int i, int j)
    {
        int count = 0;
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0},{-1,-1},{1,1},{-1,1},{1,-1}};
        
        for(int k=0;k<dirs.length;k++)
        {
            int[] dir = dirs[k];
            int nr = i + dir[0];
            int nc = j+ dir[1];
            if(nr >=0 && nr < board.length && nc >=0 && nc < board[0].length &&(board[nr][nc]==1 || board[nr][nc]==3))
            {
                count++;
            }
        }
        
        return count;
    }
}