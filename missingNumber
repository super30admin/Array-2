Time Complexity: O(n) for first pass to make elements negative and O(n) for second pass to check for non-negative numbers;
                  O(2n) but asymptotically it is O(n)
Space Complexity: O(1) as we are not taking up any extra space; we are using the ArrayList but we are returning it so it doesn't count.

class Solution {
	public List<Integer> findDisappearedNumbers(int[] nums) {
		List<Integer> result = new ArrayList<>();

		if(nums == null ||nums.length == 0 )
		{
			return result;
		}

		for(int i=0; i< nums.length; i++)
		{
			int index = Math.abs(nums[i])-1;
			if(nums[index] > 0) nums[index] *= -1;
		}
		for(int i=0; i<nums.length; i++)
		{
			if(nums[i] > 0)
				result.add(i+1);
		}
		return result;
	}
}


